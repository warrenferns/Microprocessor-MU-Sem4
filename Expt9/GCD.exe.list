EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
GCD.exe -- emu8086 assembler version: 4.08  
 
[ 16-05-2021  --  10:17:26 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       data SEGMENT
[   2]    0000: 08                                    n1    DB    8
[   3]    0001: 16                                    n2    DB    22
[   4]    0002: 00                                    rez   DB    ?
[   5]        :                                       ENDS
[   6]        :                                       
[   7]        :                                       stack SEGMENT
[   8]    0010: 00 00 00 00 00 00 00 00 00 00 00 00   DB    128    dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00             
[   9]        :                                       ENDS
[  10]        :                                       
[  11]        :                                       code SEGMENT
[  12]    0090:                                       nzd PROC
[  13]    0090: 59                                    POP CX
[  14]    0091: 5B                                    POP BX
[  15]    0092:                                       ciklus:
[  16]    0092: 80 FB 00                              CMP BL, 0d
[  17]    0095: 74 0C                                 JE done
[  18]    0097: 8A C7                                 MOV AL, BH
[  19]    0099: B4 00                                 MOV AH, 0d
[  20]    009B: F6 F3                                 DIV BL
[  21]    009D: 8A FB                                 MOV BH, BL
[  22]    009F: 8A DC                                 MOV BL, AH
[  23]    00A1: EB EF                                 JMP ciklus
[  24]    00A3:                                       done:
[  25]    00A3: 53                                    PUSH BX
[  26]    00A4: 51                                    PUSH CX
[  27]    00A5: C3                                    RET
[  28]        :                                       nzd ENDP
[  29]    00A6:                                       start:
[  30]    00A6: B8 00 00                              MOV AX, data
[  31]    00A9: 8E D8                                 MOV DS, AX
[  32]    00AB: 8E C0                                 MOV ES, AX
[  33]    00AD: B8 01 00                              MOV AX, stack
[  34]    00B0: 8E D0                                 MOV SS, AX
[  35]    00B2: 8A 3E 00 00                           MOV BH, [n1]
[  36]    00B6: 8A 1E 01 00                           MOV BL, [n2]
[  37]    00BA: 53                                    PUSH BX
[  38]    00BB: E8 D2 FF                              CALL nzd
[  39]    00BE: 5B                                    POP BX
[  40]    00BF: 88 3E 02 00                           MOV [rez], BH
[  41]    00C3:                                       exit:
[  42]    00C3: B4 4C                                 MOV AH, 4ch
[  43]    00C5: CD 21                                 INT 21h
[  44]        :                                       ENDS
[  45]        :                                       END start
[  46]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: C7      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 02      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 01      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 80      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: E5      -   check sum (l.byte)
0013: 7C      -   check sum (h.byte)
0014: 16      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 09      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 17      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 09      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022: 1E      -   relocation table - offset inside segment (l.byte)
0023: 00      -   relocation table - offset inside segment (h.byte)
0024: 09      -   relocation table - segment anchor (l.byte)
0025: 00      -   relocation table - segment anchor (h.byte)
0026 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
